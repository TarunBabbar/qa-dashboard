{
  "projects": [
    {
      "id": "proj-001",
      "name": "AI Assisted UI Automation MVP Seed",
      "description": "Seed project to demonstrate MVP with AI assisted UI automation.",
      "tooling": [
        "Selenium",
        "Playwright",
        "Cypress"
      ],
      "languages": [
        "JavaScript",
        "TypeScript",
        "Python",
        "Java"
      ],
      "createdAt": "2025-08-31T07:55:00Z",
      "updatedAt": "2025-08-31T07:55:00Z",
      "files": [
        {
          "path": "README.md",
          "content": "# AI Assisted UI Automation MVP Seed\nThis seed file seeds the MVP with example information."
        },
        {
          "path": "src/index.ts",
          "content": "console.log('Seed project loaded');"
        }
      ]
    },
    {
      "id": "proj-002",
      "name": "UI Automation Playground",
      "description": "Experimentation project for AI-generated code and UI tests.",
      "tooling": [
        "Playwright",
        "Cypress"
      ],
      "languages": [
        "JavaScript",
        "TypeScript"
      ],
      "createdAt": "2025-08-31T07:56:00Z",
      "updatedAt": "2025-08-31T07:56:00Z",
      "files": [
        {
          "path": "README.md",
          "content": "# UI Automation Playground\nInitial seed for experiments."
        },
        {
          "path": "playground.md",
          "content": "Playground instructions."
        }
      ]
    },
    {
      "id": "proj-1756645040104",
      "name": "TestingTarun",
      "testSuite": "Regression",
      "language": "JavaScript",
      "frameworkType": "UI",
      "tools": [
        "Playwright"
      ],
      "createdAt": "2025-08-31T12:57:18.352Z",
      "frameworkIds": [],
      "description": "Testing creation of Projects 1",
      "files": [
        {
          "path": "package.json",
          "content": "{\n  \"name\": \"proj-1756645040104\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"test\": \"playwright test\",\n    \"test:headed\": \"playwright test --headed\",\n    \"lint\": \"eslint . --ext .ts\",\n    \"postinstall\": \"playwright install --with-deps\"\n  },\n  \"devDependencies\": {\n    \"@playwright/test\": \"^1.43.0\",\n    \"typescript\": \"^5.1.6\"\n  }\n}\n"
        },
        {
          "path": "tsconfig.json",
          "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"CommonJS\",\n    \"lib\": [\"ES2020\", \"DOM\"],\n    \"strict\": true,\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"outDir\": \"dist\"\n  },\n  \"include\": [\"src\", \"tests\", \"playwright.config.ts\"]\n}\n"
        },
        {
          "path": "playwright.config.ts",
          "content": "import { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: 'tests',\n  timeout: 30 * 1000,\n  expect: {\n    timeout: 5000\n  },\n  fullyParallel: true,\n  forbidOnly: !!process.env.CI,\n  retries: process.env.CI ? 2 : 0,\n  workers: process.env.CI ? 1 : undefined,\n  reporter: [['list'], ['html', { open: 'never' }]],\n  use: {\n    baseURL: 'https://www.saucedemo.com',\n    headless: true,\n    viewport: { width: 1280, height: 720 },\n    actionTimeout: 5000,\n    trace: 'on-first-retry'\n  },\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] }\n    }\n  ]\n});\n"
        },
        {
          "path": "src/pages/LoginPage.ts",
          "content": "import { Page, Locator } from '@playwright/test';\n\n// Single Responsibility: encapsulates interactions with the login page only\nexport class LoginPage {\n  private readonly page: Page;\n  private readonly usernameField: Locator;\n  private readonly passwordField: Locator;\n  private readonly loginButton: Locator;\n  private readonly errorContainer: Locator;\n\n  constructor(page: Page) {\n    this.page = page;\n    this.usernameField = page.locator('#user-name');\n    this.passwordField = page.locator('#password');\n    this.loginButton = page.locator('#login-button');\n    this.errorContainer = page.locator('[data-test=\"error\"]');\n  }\n\n  // Navigate to the login page (baseURL is set in playwright.config.ts)\n  async goto(): Promise<void> {\n    await this.page.goto('/');\n  }\n\n  // Perform login with given credentials\n  async login(username: string, password: string): Promise<void> {\n    await this.usernameField.fill(username);\n    await this.passwordField.fill(password);\n    await this.loginButton.click();\n  }\n\n  // Get the visible error text (if any)\n  async getErrorText(): Promise<string> {\n    if (await this.errorContainer.isVisible()) {\n      return (await this.errorContainer.textContent())?.trim() ?? '';\n    }\n    return '';\n  }\n\n  // Expose error locator for assertions if needed\n  get error() {\n    return this.errorContainer;\n  }\n}\n"
        },
        {
          "path": "src/pages/InventoryPage.ts",
          "content": "import { Page, Locator, expect } from '@playwright/test';\n\n/**\n * InventoryPage represents the page users land on after successful authentication.\n * Encapsulates assertions and interactions with the inventory list.\n */\nexport default class InventoryPage {\n  private readonly page: Page;\n  private readonly inventoryContainer: Locator;\n  private readonly title: Locator;\n\n  constructor(page: Page) {\n    this.page = page;\n    this.inventoryContainer = page.locator('.inventory_list');\n    this.title = page.locator('.title');\n  }\n\n  async isLoaded(): Promise<boolean> {\n    // Ensure that the inventory list is visible\n    return this.inventoryContainer.isVisible();\n  }\n\n  async expectIsLoaded(): Promise<void> {\n    await expect(this.inventoryContainer).toBeVisible();\n    await expect(this.title).toHaveText('Products');\n  }\n\n  async getUrl(): Promise<string> {\n    return this.page.url();\n  }\n}\n"
        },
        {
          "path": "tests/login.spec.ts",
          "content": "import { test, expect } from '@playwright/test';\nimport { LoginPage } from '../src/pages/LoginPage';\nimport { ProductsPage } from '../src/pages/ProductsPage';\n\ntest.describe('SauceDemo negative login tests', () => {\n  test('shows error for invalid credentials', async ({ page }) => {\n    const login = new LoginPage(page);\n    const products = new ProductsPage(page);\n\n    await login.goto();\n\n    // Attempt with invalid username and password\n    await login.login('invalid_user', 'wrong_password');\n\n    // Expect to stay on login page and show proper error message\n    const errorText = await login.getErrorText();\n    expect(errorText).toContain('Username and password do not match any user');\n\n    // Ensure we did not navigate to products page\n    expect(await products.isOpen()).toBeFalsy();\n  });\n\n  test('locked out user cannot login and sees locked out message', async ({ page }) => {\n    const login = new LoginPage(page);\n    const products = new ProductsPage(page);\n\n    await login.goto();\n\n    // locked_out_user is a known account on saucedemo\n    await login.login('locked_out_user', 'secret_sauce');\n\n    const errorText = await login.getErrorText();\n    expect(errorText).toContain('Sorry, this user has been locked out.');\n\n    // Verify products page is not accessible\n    expect(await products.isOpen()).toBeFalsy();\n  });\n});\n"
        },
        {
          "path": "README.md",
          "content": "# proj-1756645040104\n\nPlaywright TypeScript project containing two negative tests for https://www.saucedemo.com.\n\nHow to run:\n\n1. npm install\n2. npm test\n\nNotes:\n- The project uses the Page Object Model under `src/pages`.\n- Tests are located under `tests/`.\n- The postinstall script will attempt to install Playwright browsers automatically (`playwright install --with-deps`).\n\nTests included:\n- invalid credentials\n- locked out user\n"
        },
        {
          "path": ".gitignore",
          "content": "node_modules/\n.playwright/\ntest-results/\nreport/\ndist/\n.env\n"
        },
        {
          "path": "src/pages/ProductsPage.ts",
          "content": "import { Page, Locator } from '@playwright/test';\n\n// Represents the products (inventory) page after successful login\nexport class ProductsPage {\n  private readonly page: Page;\n  private readonly inventoryContainer: Locator;\n  private readonly pageTitle: Locator;\n\n  constructor(page: Page) {\n    this.page = page;\n    this.inventoryContainer = page.locator('#inventory_container');\n    this.pageTitle = page.locator('.title');\n  }\n\n  async isOpen(): Promise<boolean> {\n    return this.inventoryContainer.isVisible();\n  }\n\n  async getTitle(): Promise<string> {\n    return (await this.pageTitle.textContent())?.trim() ?? '';\n  }\n}\n"
        }
      ],
      "updatedAt": "2025-09-01T06:49:45.182Z"
    }
  ]
}